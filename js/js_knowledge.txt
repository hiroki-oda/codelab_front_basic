・JSの役割
Webサイトに「動きをつける」例えばスライドショー、アニメーション、アコーディオン、スムーススクロールなどなど。。

・JSを外部ファイルとして読み込む場合、scriptタグの何という属性ファイルパスを記載するか
src　例　<script src="sample.js"></script>

・JSはbody終了タグの直前で読み込むことが多い理由
script読み込み中のレンダリング停止をなくすため。レンダリングとは「元になる情報（HTML）」を「整形して表示させる（我々が普段見ているHP）」処理のこと。

・オブジェクト
対象、物。操作できるデータそのもの。
JavaScriptでは数値も文字列も配列もすべてオブジェクト。データと属性が一緒になったものを指す。

・メソッド
オブジェクトのプロパティに関数を定義した場合、関数と呼ばずに、メソッドと呼ぶ。

・プロパティ
オブジェクトが持つ属性、情報のこと。

・Elementオブジェクト
HTML、XMLでいう要素（タグ）に相当。

・カスタム属性
HTML要素に対して設定できる独自の属性。data-から始まる。

・JSON
JavaScript Object Notationの略。
XMLと同じようなテキストベースのデータフォーマット。人間が理解しやすいフォーマット。

・WebAPI
HTTPプロトコルを用いてネットワーク越しにサービスのデータやプログラムを外部から利用できるインターフェースのこと。
フォーマットはJSONが基本。

・Ajax
Asynchronous JavaScript + XMLの略。
ウェブブラウザ内で非同期通信を行いながらインターフェイスの構築を行うプログラミング手法。

・SPA
Single Page Applicationの略。
単一のWebページでアプリを構成する構造のこと。ブラウザによるページ遷移を行わず、JSでHTMLの一部の切り替えなどを行うことで
挙動に縛られずズムーズなパフォーマンスを表現できる。

・スクリプト言語
プログラムの記述や実行を比較的簡易に行うことができる言語の総称。
台本、レシピのような感じ。

・オブジェクト指向
プログラムを手順ではなく物の作成と操作として見る考え方。

・コンパイラ言語
機械語に翻訳されているプログラミング言語の１つ。
Java、C＃、C言語などがこれにあたる。

・JavaとJSの違い
違う目的でそれぞれ使用される。別物の言語。
Java・・・仮想マシンで動くため環境に依存しない。一度プログラムを書けば、どんなハードウェアでも作動することが目的として作られた。データ型というものを最初に固定で決める「静的型付」という文法。コンパイルが必要。
業務システム、TwitterなどのWebサービス、スマホ用アプリなどで利用される。
Javascript・・・プログラミング知識がなくても開発環境がそろっていなくても、手軽に始めることができる。容易に開発できる手軽さ、素早さを目的に作られた。データ型を適宜変更できる「動的型付」という文法。コンパイルは不要。
Webブラウザ上で色を変えたり、ポップ表示させるなどといった動きを開発する際に利用される。
ちなみに名前が似ているのはJavaが発表された当時、注目されていたので人気に便乗しょうとJavaScriptと名前を変更した。

・DOM
Document Object Modelの略。
プログラムからHTMLやXMLを自由に操作するための仕組み。
何もしていない状態のHTMLファイルはJavaScriptから手を出す事が出来ない。ファイルの特定の部分に目印を付けて「この部分」に「こういう事をしたい」という処理を可能にするための取り決め。
特徴としてツリー構造（階層構造）、ノードという言葉で説明される、WebページとJavaScriptなどのプログラミング言語をつなぐ。

・Node.js
ブラウザではなく、サーバー側で動くJavaScriptのこと。
サーバー側もブラウザ側のようにJavaScriptで書けたら楽ということで注目されている。

・JSのバージョンの違い　ES5/ES6
関数宣言　ES5・・・fanction命令。　ES6・・・アロー関数を利用することでシンプルに記述できる。
変数の宣言　ES6では従来のvarに加えてlet constが変数で使用できる。
　　　　　　let・・・変数の再宣言ができない。const・・・変数への再宣言の再代入ができない。
モジュール　ES5以前では機能ごとに書くJSファイルに分割して管理・開発することができなかったが、ES6では別ファイルをインポートできる。
クラスの宣言　ES5ではprototypeを利用してクラス定義をしていたが、ES6ではclass命令でできるようになった。

・GoogleChromeのデベロッパーツールでJSをデバッグは、何のタブで行うか？
Sourcesタブから対象のJSファイルを選択。

・GoogleChromeのデベロッパーツールでJSのログの確認は、何のタブで行うか？
consoleタブ。console.log()
